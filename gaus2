public class GaussJordan {

    public static void main(String[] args) {
        double[][] matrix = {
            {2, 1, -1, 0, 3, -2, -1},
            {3, 2, 1, 2, 0, -1, 2},
            {1, -3, 2, -3, 2, 0, 1},
            {5, 2, -1, 4, -1, 3, -2},
            {2, 0, 1, 1, 3, -2, -1},
            {4, -2, 3, 1, -2, 1, 3}
        };

        gaussJordan(matrix);

        System.out.println("Solution:");
        for (int i = 0; i < matrix.length; i++) {
            System.out.println("x" + (i + 1) + " = " + matrix[i][matrix[i].length - 1]);
        }
    }

    public static void gaussJordan(double[][] matrix) {
        int n = matrix.length;

        for (int i = 0; i < n; i++) {
            // Partial pivoting
            int maxRow = i;
            for (int k = i + 1; k < n; k++) {
                if (Math.abs(matrix[k][i]) > Math.abs(matrix[maxRow][i])) {
                    maxRow = k;
                }
            }

            double[] temp = matrix[i];
            matrix[i] = matrix[maxRow];
            matrix[maxRow] = temp;

            // Make the diagonal elements 1
            double divisor = matrix[i][i];
            for (int j = i; j < n + 1; j++) {
                matrix[i][j] /= divisor;
            }

            // Make other elements in the column zero
            for (int k = 0; k < n; k++) {
                if (k != i) {
                    double multiplier = matrix[k][i];
                    for (int j = i; j < n + 1; j++) {
                        matrix[k][j] -= multiplier * matrix[i][j];
                    }
                }
            }
        }
    }
}
