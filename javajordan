// Java Implementation for Gauss-Jordan Elimination Method
class GFG {

    // Tamaño máximo de la matriz
    static int M = 10;

    // Función para imprimir la matriz
    static void PrintMatrix(float a[][], int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= n; j++) 
                System.out.print(a[i][j] + " ");
            System.out.println();
        }
    }

    // Función para reducir la matriz a su forma escalonada reducida
    static int PerformOperation(float a[][], int n) {
        int i, j, k = 0, c, flag = 0;
        float pro = 0;

        // Realizar operaciones elementales
        for (i = 0; i < n; i++) {
            // Si el elemento diagonal es cero, buscar una fila para intercambiar
            if (a[i][i] == 0) {
                c = 1;
                while ((i + c) < n && a[i + c][i] == 0) 
                    c++;         
                if ((i + c) == n) {
                    flag = 1; // Marcar que la matriz es singular
                    break;
                }
                // Intercambiar filas
                for (j = i, k = 0; k <= n; k++) {
                    float temp = a[j][k];
                    a[j][k] = a[j + c][k];
                    a[j + c][k] = temp;
                }
            }

            // Hacer que el elemento diagonal sea 1
            float div = a[i][i];
            for (j = 0; j <= n; j++) {
                a[i][j] /= div;
            }

            // Hacer ceros en la columna actual, excepto en la diagonal
            for (j = 0; j < n; j++) {
                if (i != j) {
                    float p = a[j][i];
                    for (k = 0; k <= n; k++) {
                        a[j][k] -= a[i][k] * p;
                    }
                }
            }
        }
        return flag;
    }

    // Función para imprimir el resultado
    static void PrintResult(float a[][], int n, int flag) {
        System.out.print("Result is : ");

        if (flag == 2)     
            System.out.println("Infinite Solutions Exists"); 
        else if (flag == 3)     
            System.out.println("No Solution Exists");
        else {
            // Imprimir la solución
            for (int i = 0; i < n; i++)         
                System.out.print(a[i][n] / a[i][i] + " ");     
        }
    }

    // Función para verificar la consistencia del sistema
    static int CheckConsistency(float a[][], int n, int flag) {
        int i, j;
        float sum;

        // flag == 2 para infinitas soluciones
        // flag == 3 para ninguna solución
        flag = 3;
        for (i = 0; i < n; i++) {
            sum = 0;
            for (j = 0; j < n; j++)     
                sum += a[i][j];
            if (sum == a[i][n]) 
                flag = 2;     
        }
        return flag;
    }

    // Función principal
    public static void main(String[] args) {
        // Matriz aumentada del sistema de ecuaciones
        float a[][] = {{ 0, 2, 1, 4 }, 
                       { 1, 1, 2, 6 }, 
                       { 2, 1, 1, 7 }};

        // Orden de la matriz (número de variables)
        int n = 3, flag = 0;

        // Realizar la eliminación de Gauss-Jordan
        flag = PerformOperation(a, n);

        // Verificar la consistencia del sistema
        if (flag == 1)     
            flag = CheckConsistency(a, n, flag); 

        // Imprimir la matriz final aumentada
        System.out.println("Final Augmented Matrix is : ");
        PrintMatrix(a, n);
        System.out.println("");

        // Imprimir el resultado
        PrintResult(a, n, flag);
    }
}
