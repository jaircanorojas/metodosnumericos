public class MetodoGaussSeidel {

    public static void main(String[] args) {
    
        double[][] coeficientes = {
            {3, 1, -2},
            {2, -4, 1},
            {-1, 3, 2}
        };
        double[] constantes = {5, -7, 6};
        double[] estimacionInicial = {0, 0, 0}; // Estimación inicial para x, y, z

        gaussSeidel(coeficientes, constantes, estimacionInicial, 0.0001, 100);
    }

    public static void gaussSeidel(double[][] coeficientes, double[] constantes, double[] estimacionInicial, double tolerancia, int maxIteraciones) {
        int n = coeficientes.length;
        double[] x = new double[n];
        double[] xAnterior = new double[n];
        System.arraycopy(estimacionInicial, 0, x, 0, n);

        int iter = 0;
        double error = Double.MAX_VALUE;

        while (error > tolerancia && iter < maxIteraciones) {
            System.arraycopy(x, 0, xAnterior, 0, n);
            for (int i = 0; i < n; i++) {
                double sigma = 0.0;
                for (int j = 0; j < n; j++) {
                    if (j != i) {
                        sigma += coeficientes[i][j] * x[j];
                    }
                }
                x[i] = (constantes[i] - sigma) / coeficientes[i][i];
            }
            error = calcularError(x, xAnterior);
            iter++;
        }

        System.out.println("Solución:");
        for (int i = 0; i < n; i++) {
            System.out.println("x[" + i + "] = " + x[i]);
        }
        System.out.println("Iteraciones: " + iter);
    }

    public static double calcularError(double[] x, double[] xAnterior) {
        double maxError = Double.MIN_VALUE;
        for (int i = 0; i < x.length; i++) {
            double error = Math.abs(x[i] - xAnterior[i]);
            if (error > maxError) {
                maxError = error;
            }
        }
        return maxError;
    }
}
