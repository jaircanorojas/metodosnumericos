public class JacobiMethod {
    public static void main(String[] args) {
        double[][] coefficients = {{4, 1, 2}, {3, 5, 1}, {1, 1, 3}};
        double[] constants = {7, -4, 3};
        double[] initialGuess = {0, 0, 0};
        double[] solution = jacobi(coefficients, constants, initialGuess, 0.0001, 100);
        for (int i = 0; i < solution.length; i++) {
            System.out.println("x" + (i + 1) + ": " + solution[i]);
        }
    }

    public static double[] jacobi(double[][] coefficients, double[] constants, double[] initialGuess, double tolerance, int maxIterations) {
        int n = coefficients.length;
        double[] previous = new double[n];
        double[] current = initialGuess.clone();
        int iteration = 0;
        while (iteration < maxIterations) {
            for (int i = 0; i < n; i++) {
                previous[i] = current[i];
            }
            for (int i = 0; i < n; i++) {
                double sum = constants[i];
                for (int j = 0; j < n; j++) {
                    if (j != i) {
                        sum -= coefficients[i][j] * previous[j];
                    }
                }
                current[i] = sum / coefficients[i][i];
            }
            iteration++;
            boolean converged = true;
            for (int i = 0; i < n; i++) {
                if (Math.abs(current[i] - previous[i]) > tolerance) {
                    converged = false;
                    break;
                }
            }
            if (converged) {
                break;
            }
        }
        return current;
    }
}
