import java.util.Scanner;

public class MetodoJacobi {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Ingrese el tamaño de la matriz cuadrada (n):");
        int n = scanner.nextInt();

        double[][] matrizA = new double[n][n];
        double[] vectorB = new double[n];

        System.out.println("Ingrese los elementos de la matriz de coeficientes A:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrizA[i][j] = scanner.nextDouble();
            }
        }

        System.out.println("Ingrese los elementos del vector de términos independientes b:");
        for (int i = 0; i < n; i++) {
            vectorB[i] = scanner.nextDouble();
        }

        double[] solucionInicial = new double[n];
        System.out.println("Ingrese los valores iniciales de la solución:");
        for (int i = 0; i < n; i++) {
            solucionInicial[i] = scanner.nextDouble();
        }

        System.out.println("Ingrese el número máximo de iteraciones:");
        int iteracionesMax = scanner.nextInt();

        System.out.println("Ingrese el valor de tolerancia:");
        double tolerancia = scanner.nextDouble();

        // Llamar al método de Jacobi para obtener la solución
        double[] solucion = metodoJacobi(matrizA, vectorB, solucionInicial, iteracionesMax, tolerancia);

        // Imprimir la solución
        System.out.println("Solución encontrada:");
        for (int i = 0; i < solucion.length; i++) {
            System.out.println("x" + (i + 1) + " = " + solucion[i]);
        }

        scanner.close();
    }

    public static double[] metodoJacobi(double[][] matrizA, double[] vectorB, double[] solucionInicial, int iteracionesMax, double tolerancia) {
        int n = matrizA.length;
        double[] solucionActual = solucionInicial.clone();
        double[] solucionAnterior = new double[n];
        int iteraciones = 0;
        double error = Double.MAX_VALUE;

        while (iteraciones < iteracionesMax && error > tolerancia) {
            for (int i = 0; i < n; i++) {
                solucionAnterior[i] = solucionActual[i];
            }

            for (int i = 0; i < n; i++) {
                double suma = 0.0;
                for (int j = 0; j < n; j++) {
                    if (j != i) {
                        suma += matrizA[i][j] * solucionAnterior[j];
                    }
                }
                solucionActual[i] = (vectorB[i] - suma) / matrizA[i][i];
            }

            error = calcularError(solucionActual, solucionAnterior);
            iteraciones++;
        }

        return solucionActual;
    }

    public static double calcularError(double[] solucionActual, double[] solucionAnterior) {
        double maxError = Double.MIN_VALUE;
        for (int i = 0; i < solucionActual.length; i++) {
            double error = Math.abs(solucionActual[i] - solucionAnterior[i]);
            if (error > maxError) {
                maxError = error;
            }
        }
        return maxError;
    }
}
