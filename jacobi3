public class MetodoJacobi {
    public static void main(String[] args) {
        // Definir la matriz de coeficientes
        double[][] matrizA = {{5, 1, 1}, {1, 6, 1}, {2, 1, 7}};
        // Definir el vector de términos independientes
        double[] vectorB = {10, 12, 14};
        // Definir la solución inicial (todos los elementos a 0)
        double[] solucionInicial = {0, 0, 0};
        // Definir el número máximo de iteraciones
        int iteracionesMax = 100;
        // Definir el valor de tolerancia
        double tolerancia = 0.0001;

        // Llamar al método de Jacobi para obtener la solución
        double[] solucion = metodoJacobi(matrizA, vectorB, solucionInicial, iteracionesMax, tolerancia);

        // Imprimir la solución
        System.out.println("Solución encontrada:");
        for (int i = 0; i < solucion.length; i++) {
            System.out.println("x" + (i + 1) + " = " + solucion[i]);
        }
    }

    public static double[] metodoJacobi(double[][] matrizA, double[] vectorB, double[] solucionInicial, int iteracionesMax, double tolerancia) {
        int n = matrizA.length;
        double[] solucionActual = solucionInicial.clone();
        double[] solucionAnterior = new double[n];
        int iteraciones = 0;
        double error = Double.MAX_VALUE;

        while (iteraciones < iteracionesMax && error > tolerancia) {
            for (int i = 0; i < n; i++) {
                solucionAnterior[i] = solucionActual[i];
            }

            for (int i = 0; i < n; i++) {
                double suma = 0.0;
                for (int j = 0; j < n; j++) {
                    if (j != i) {
                        suma += matrizA[i][j] * solucionAnterior[j];
                    }
                }
                solucionActual[i] = (vectorB[i] - suma) / matrizA[i][i];
            }

            error = calcularError(solucionActual, solucionAnterior);
            iteraciones++;
        }

        return solucionActual;
    }

    public static double calcularError(double[] solucionActual, double[] solucionAnterior) {
        double maxError = Double.MIN_VALUE;
        for (int i = 0; i < solucionActual.length; i++) {
            double error = Math.abs(solucionActual[i] - solucionAnterior[i]);
            if (error > maxError) {
                maxError = error;
            }
        }
        return maxError;
    }
}
